#include <esp_now.h>
#include <WiFi.h>

#include <Wire.h>

// REPLACE WITH THE MAC Address of your receiver (ES AL QUE ESTOY MANDANDO LA INFORMACIÓN) este código estará en el otro
uint8_t broadcastAddress[] = {XXXX, XXXX, XXXX, XXXX, XXXX, XXXX};

//Itzalita dogonean gordetak gelditzen diren bariableak
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR int lastState;


//PIn de entrada sensor magnetico
const int windowPin = 25;

// Variable to store if sending data was successful
String success;
typedef struct struct_message {  
    boolean windowOpen;
    int windowID;
}struct_message;
// Create a struct_message called BME280Readings to hold sensor readings
struct_message windowInfo;

/*
Method to print the reason by which ESP32
has been awaken from sleep
*/
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;

  wakeup_reason = esp_sleep_get_wakeup_cause();

  switch(wakeup_reason)
  {
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
  }
}

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
  if (status ==0){
    success = "Delivery Success :)";
     //Go to sleep now
  Serial.println("Going to sleep now");
  //delay(1000);
  esp_deep_sleep_start();
  Serial.println("This will never be printed");
  }
  else{
    success = "Delivery Fail :(";
     //Go to sleep now
  Serial.println("Going to sleep now");
  //delay(1000);
  esp_deep_sleep_start();
  Serial.println("This will never be printed");
  }
}


void updateDisplay(){

  Serial.println("EL ESTADO DE LA VENTANA: ");
  Serial.print(windowInfo.windowOpen);
 
}

//pide los valores a los sensores 
void readWindow(){
  int value = 0;
  value = digitalRead(windowPin );  //lectura digital de pin
   if (value == HIGH) {//leihoa itxita
      windowInfo.windowOpen = false;
      Serial.println("lehioa itxita dago, beraz imanak kontaktu egiten du, beraz windowOpen=false=0");
      }
  else {
      windowInfo.windowOpen = true;//leihoa irekita
      Serial.println("lehioa irekita dago, beraz imanak EZ kontaktu egiten , beraz windowOpen=TRUE=1");
  }
  
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(115200);
  delay(1000); //Take some time to open up the Serial Monitor
    pinMode(windowPin , INPUT);  //definir pin como entrada

      //Increment boot number and print it every reboot
  ++bootCount;
  Serial.println("Boot number: " + String(bootCount));

  //Print the wakeup reason for ESP32
  print_wakeup_reason();
  Serial.print("Estado ventana 2 (1 cerrada, 0 abierta): ");
  pinMode(windowPin , INPUT);
  lastState = digitalRead(windowPin);
  Serial.println(lastState);
  

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
  // Register for a callback function that will be called when data is received
//  esp_now_register_recv_cb(OnDataRecv);

/*
  Sentsoreen irakurketa egin eta nodo zentralakin komunikatu
  */
//actualiza los valores de los sensores
  readWindow();
     Serial.println(windowInfo.windowOpen);

  // S envían esos datos via ESP-NOW
  windowInfo.windowID = 2;
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &windowInfo, sizeof(windowInfo));
   
  if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");
  }
  //actualiza la pantalla
  updateDisplay();
  
/*
  Azkeneko estadoa aktualizatu eta kondizio bezala esnatzeko jarri.
  */
  if (lastState == 1) {//leihoa itxita
      lastState = 0;
      Serial.println("Actualizamos para despertar a 0");
      }
  else {
      lastState = 1;
      Serial.println("Actualizamos para despertar a 1");
  }
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_25,lastState); //1 = High, 0 = Low

 
}
 
void loop() {
  
}
