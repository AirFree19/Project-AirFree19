#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>

// Replace the next variables with your SSID/Password combination
const char* ssid = "Your SSID";
const char* password = "Your Password";

// Add your MQTT Broker IP address, example:
//const char* mqtt_server = "IP address";
const char* mqtt_server = " IP address";

//Itzalita dogonean gordetak gelditzen diren bariableak
RTC_DATA_ATTR int bootCount = 0;
RTC_DATA_ATTR int lastState;

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

// Window pin
const int window = 25;
int windowstate = 0;

/*
Method to print the reason by which ESP32
has been awaken from sleep
*/
void print_wakeup_reason(){
  esp_sleep_wakeup_cause_t wakeup_reason;
  wakeup_reason = esp_sleep_get_wakeup_cause();

  switch(wakeup_reason)
  {
    case ESP_SLEEP_WAKEUP_EXT0 : Serial.println("Wakeup caused by external signal using RTC_IO"); break;
    case ESP_SLEEP_WAKEUP_EXT1 : Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
    case ESP_SLEEP_WAKEUP_TIMER : Serial.println("Wakeup caused by timer"); break;
    case ESP_SLEEP_WAKEUP_TOUCHPAD : Serial.println("Wakeup caused by touchpad"); break;
    case ESP_SLEEP_WAKEUP_ULP : Serial.println("Wakeup caused by ULP program"); break;
    default : Serial.printf("Wakeup was not caused by deep sleep: %d\n",wakeup_reason); break;
  }
}

void setup() {
  Serial.begin(115200);
  // default settings
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  pinMode(window, INPUT);

//Increment boot number and print it every reboot
  ++bootCount;
  Serial.println("Boot number: " + String(bootCount));
  
//Print the wakeup reason for ESP32
  print_wakeup_reason();
  Serial.println ("Estoy despierto");
  Serial.print("Estado ventana 1 (1 cerrada, 0 abierta): ");
  lastState = digitalRead(window);
  //Serial.println(lastState);

/*
  Azkeneko estadoa aktualizatu eta kondizio bezala esnatzeko jarri.
  */
  if (lastState == 1) {//window close
      lastState = 0;
      Serial.println("Actualizamos para despertar a 0");
      }
  else {
      lastState = 1;
      Serial.println("Actualizamos para despertar a 1");
  }
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_25,lastState); //1 = High, 0 = Low
  
  windowstate = digitalRead(window); 
  
if (windowstate == HIGH){
   snprintf (msg, 75, "WINDOW ONE CLOSED");
   Serial.println(msg);
   client.publish("esp32/window1", msg);
   delay(200);
   Serial.println ("Dormido1");
   esp_deep_sleep_start();
      
} else {
       ++value;
   snprintf (msg, 75, "WINDOW ONE OPENED", value);
   Serial.println(msg);
   client.publish("esp32/window1", msg);
   delay(200);
   Serial.println ("Dormido2");
   esp_deep_sleep_start();
 }
}

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void loop() {

}
